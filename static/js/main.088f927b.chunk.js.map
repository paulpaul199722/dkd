{"version":3,"sources":["connection.tsx","candy-machine.ts","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["SequenceType","getErrorForTransaction","connection","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactions","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","console","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","number","txs","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","Error","err","getUnixTs","Date","getTime","timeout","startTime","done","sleep","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","mintOneToken","Keypair","generate","getAtaForMint","userTokenAccountAddress","userPayingAccountAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","getNetworkToken","gatekeeperNetwork","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","toBase58","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","undefined","collectionPDA","collectionPDAAccount","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txnEstimate","INIT_INSTRUCTIONS_LENGTH","INIT_SIGNERS_LENGTH","initInstructions","splice","initSigners","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","setIsMinting","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","disabled","onClick","network","ACTIVE","findGatewayToken","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettingType","toDate","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","useMemo","refreshCandyMachineState","useCallback","cndy","active","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","noHide","document","getElementById","click","connected","mintOne","mintTxId","txTimeout","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","clusterUrl","handleTransaction","broadcastTransaction","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","getCandyMachineId","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.088f927b.chunk.js","sourcesContent":["import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 30000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix: anchor.web3.TransactionInstruction[][] = [];\n  const signersMatrix: anchor.web3.Keypair[][] = [];\n\n  const state = candyMachine.state;\n  const txnEstimate =\n    892 +\n    (collectionPDAAccount && state.retainAuthority ? 182 : 0) +\n    (state.tokenMint ? 177 : 0) +\n    (state.whitelistMintSettings ? 33 : 0) +\n    (state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n    (state.gatekeeper ? 33 : 0) +\n    (state.gatekeeper?.expireOnUse ? 66 : 0);\n\n  const INIT_INSTRUCTIONS_LENGTH = 4;\n  const INIT_SIGNERS_LENGTH = 1;\n\n  console.log('Transaction estimate: ', txnEstimate);\n  if (txnEstimate > 1230) {\n    const initInstructions = instructions.splice(0, INIT_INSTRUCTIONS_LENGTH);\n    console.log(initInstructions);\n    instructionsMatrix.push(initInstructions);\n    const initSigners = signers.splice(0, INIT_SIGNERS_LENGTH);\n    signersMatrix.push(initSigners);\n  }\n\n  instructionsMatrix.push(instructions);\n  signersMatrix.push(signers);\n\n  if (cleanupInstructions.length > 0) {\n    instructionsMatrix.push(cleanupInstructions);\n    signersMatrix.push([]);\n  }\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              noHide: true,\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              noHide: true,\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            noHide: true,\n          });\n        }\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        noHide: true,\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n        );\n\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={isActive || (isPresale && isWhitelistUser)}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={alertState.noHide ? null : 6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\n\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  noHide?: boolean;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}